---
import Close from "@assets/icons/Close.astro";
import Download from "@assets/icons/Download.astro";
import Mail from "@assets/icons/Mail.astro";
import { getRelativeLocaleUrl } from "astro:i18n";

interface Props {
  lang: string;
}

const { lang } = Astro.props;
---

<div
  id="global-modal"
  class="bg-secondary/10 invisible fixed inset-0 z-50 flex items-center justify-center opacity-0 backdrop-blur-md transition-opacity duration-300"
>
  <div
    class="modal-content bg-primary relative mx-4 flex max-h-[95vh] max-w-5xl scale-95 transform flex-col gap-6 overflow-y-auto rounded-lg p-8 opacity-0 shadow-2xl transition-all duration-300 md:p-12"
  >
    {/* Tools */}
    <div
      class="absolute top-2 right-2 z-51 flex flex-row-reverse items-center gap-3 sm:flex-col md:top-3 md:right-3 lg:top-4 lg:right-4"
    >
      <button
        id="close-modal"
        class="cursor-pointer p-1 transition-transform duration-300 hover:scale-110"
        aria-label="Close modal"
      >
        <Close styles="size-6 md:size-7" />
      </button>
      <a
        id="modal-download"
        href="/"
        aria-label="download project"
        class="hover:text-accent p-1 transition-transform duration-300 hover:scale-105"
      >
        <Download styles="size-6 md:size-7" />
      </a>
      <a
        aria-label="contact me"
        href={getRelativeLocaleUrl(lang, "contact")}
        class="hover:text-accent p-1 transition-transform duration-300 hover:scale-105"
      >
        <Mail styles="size-6 md:size-7" />
      </a>
    </div>

    {/* Dynamic content */}
    <div class="grid size-full gap-8 lg:grid-cols-3">
      <div class="relative flex justify-center lg:col-span-2">
        <img
          id="modal-image"
          decoding="async"
          class="max-h-[80vh] rounded object-contain"
        />
      </div>
      <div
        class="relative flex h-full flex-col md:max-h-[80vh] md:overflow-y-auto"
      >
        <h2
          id="modal-title"
          aria-label="title"
          class="text-accent mb-2 text-2xl font-bold uppercase sm:text-3xl md:mb-4 md:text-4xl"
        >
        </h2>
        <p
          id="modal-description"
          aria-label="description"
          class="leading-relaxed"
        >
        </p>
      </div>
    </div>
  </div>
</div>

<script is:inline data-astro-rerun>
  (function () {
    const modal = document.getElementById("global-modal");
    const modalContent = modal.querySelector(".modal-content");
    const modalImage = document.getElementById("modal-image");
    const modalTitle = document.getElementById("modal-title");
    const modalDescription = document.getElementById("modal-description");
    const downloadBtn = document.getElementById("modal-download");
    const closeBtn = document.getElementById("close-modal");

    function openModal(card) {
      const { title, description, image } = card.dataset;

      const img = new Image();
      img.src = image;
      img.onload = () => {
        modalImage.src = image;
        modalImage.alt = title;
        modalTitle.textContent = title;
        modalDescription.textContent = description;
        downloadBtn.href = image;
        downloadBtn.download = `${title}.webp`;

        modal.classList.remove("invisible", "opacity-0");
        modal.classList.add("opacity-100");

        setTimeout(() => {
          modalContent.classList.remove("scale-95", "opacity-0");
          modalContent.classList.add("scale-100", "opacity-100");
        }, 10);
      };
    }

    function closeModal() {
      // animar el contenedor primero
      modalContent.classList.remove("scale-100", "opacity-100");
      modalContent.classList.add("scale-95", "opacity-0");

      modal.classList.remove("opacity-100");
      modal.classList.add("opacity-0");

      setTimeout(() => {
        modal.classList.add("invisible");
      }, 300);
    }

    // DelegaciÃ³n de eventos para todas las cards
    document.addEventListener("click", (e) => {
      const card = e.target.closest(".card");
      if (card) openModal(card);
    });

    closeBtn.addEventListener("click", closeModal);

    // Cerrar al hacer click fuera
    modal.addEventListener("click", (e) => {
      if (e.target === modal) closeModal();
    });
  })();
</script>
